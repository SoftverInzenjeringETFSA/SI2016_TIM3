package ba.eventTS.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import ba.eventTS.models.User;
import ba.eventTS.repositories.UserRepository;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /demo (after Application path)
public class UserController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserDao userRepository;

	@GetMapping(path="/save") // Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam String email, @RequestParam String password, @RequestParam String lastName) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = new User();
		n.setName(name);
		n.setEmail(email);
		n.setLastName(lastName);
		n.setPassword(password);
		userRepository.save(n);
		return "Saved";
	}

	@GetMapping(path="/delete")
	public @ResponseBody String delete(@RequestParam int idUsera)
	{
	    try {
	      User user = new User(idUsera);
	      userRepository.delete(user);
	    }
	    catch(Exception ex) {
	      return ex.getMessage();
	    }
	    return "User succesfully deleted!";
	  }

	@GetMapping(path="/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// vraca sve korisnike
		return userRepository.findAll();
	}
	
	@RequestMapping(value="/get-by-email")
	  @ResponseBody
	  public String getByEmail(String email) {
	    String userId;
	    try {
	      User user = userRepository.getByEmail(email);
	      userId = String.valueOf(user.getId());
	    }
	    catch(Exception ex) {
	      return "User not found";
	    }
	    return "The user id is: " + userId;
	  }

	
	
}